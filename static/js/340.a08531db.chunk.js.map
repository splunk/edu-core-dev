{"version":3,"file":"static/js/340.a08531db.chunk.js","mappings":"oKAkHA,QA/GA,WAEI,OAAOA,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAACC,OAAO,IAAIC,SAAA,EAGnCC,EAAAA,EAAAA,KAACC,EAAAA,QAAI,CAACC,IAAI,IAAIC,SAAS,OACnBC,KAAM,oOAUVJ,EAAAA,EAAAA,KAACC,EAAAA,QAAI,CAACC,IAAI,IAAIC,SAAS,SACnBC,KAAM,yxCA0CVJ,EAAAA,EAAAA,KAACC,EAAAA,QAAI,CAACC,IAAI,IAAIC,SAAS,OACnBC,KAAM,uMAUVJ,EAAAA,EAAAA,KAACC,EAAAA,QAAI,CAACC,IAAI,IAAIC,SAAS,aACnBC,KAAM,soCAsCV,C,uMC5EA,QAhBA,SAAgBC,GAAyB,IAAxB,IAACH,EAAG,KAAEE,EAAI,SAAED,GAASE,EAMlC,OAJAC,EAAAA,EAAAA,YAAU,KACNC,IAAAA,cAAoB,GACtB,KAEKX,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACHC,EAAAA,EAAAA,KAACQ,EAAAA,EAAO,KACRZ,EAAAA,EAAAA,MAACa,EAAAA,EAAK,CAACC,UAAU,MAAMC,QAAS,EAAGC,GAAI,CAACd,OAAO,GAAGC,SAAA,EAC9CH,EAAAA,EAAAA,MAACiB,EAAAA,EAAM,CAACC,QAAQ,UAAUF,GAAI,CAAEG,QAAQ,UAAWjB,OAAQ,EAAGkB,MAAM,SAAUjB,SAAA,CAAC,QAAMG,MACrFF,EAAAA,EAAAA,KAAA,OAAKH,MAAO,CAACmB,MAAM,OAAOjB,UAACC,EAAAA,EAAAA,KAAA,QAAMiB,UAAW,YAAYd,IAAWJ,SAAEK,WAIjF,C","sources":["courses/usra-10/Lab2.jsx","courses/usra-10/Task.jsx"],"sourcesContent":["//import Snippet from './Snippet';\nimport Task from './Task';\n\nfunction Lab2() {\n\n    return(<div style={{margin:50}}>\n\n\n<Task num=\"2\" language=\"bash\"\n    code={`#!/bin/bash\n\nURL=\"https://localhost:8089/services/data/indexes\"\n\ncurl -k -X GET $URL \\\\\n-H \"Authorization: Bearer $TOKEN\" \\\\\n| xmlstarlet sel -N a=\"http://www.w3.org/2005/Atom\" -t \\\\\n-m /a:feed/a:entry -v a:title -n`}\n/>\n\n<Task num=\"3\" language=\"python\"\n    code={`import os\nimport requests\nimport urllib3\nimport xml.etree.ElementTree as ET\n\n# suppress HTTPS warning messages\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\n# REST API endpoint\nurl = \"https://localhost:8089/services/data/indexes\"\n\n# Headers to send with the request (a JSON object)\nheaders = {\n        'Authorization': 'Bearer ' + os.environ['TOKEN'],\n        'Content-Type': 'application/x-www-form-urlencoded'\n}\n\n# invoke the REST API\nresponse = requests.get(url=url, headers=headers, verify=False)\n\n# retrieve and print response data\n#print(response.content)\nprint(\"Request: [\" + response.request.method + \"] \"  + response.request.url)\nprint(\"Response: [\" + str(response.status_code) + \"] \" + response.reason)\n\n# XML / Atom namespaces\n# '' = atom, s = splunk\nns = {\n        '': 'http://www.w3.org/2005/Atom',\n        's': 'http://dev.splunk.com/ns/rest',\n        'opensearch': 'http://a9.com/-/spec/opensearch/1.1/'\n}\n\nif (response.status_code == 200):\n        # get xml root element\n        root = ET.fromstring(response.text)\n        # for all entries in the atom namespace\n        for entry in root.findall('entry', ns):\n                # print the entry title\n                print(\"  \" + entry.find('title', ns).text)`}\n/>\n\n<Task num=\"4\" language=\"bash\"\n    code={`#!/bin/bash\n\nURL=\"https://localhost:8089/services/data/indexes\"\n\ncurl -k -X GET $URL \\\\\n-H \"Authorization: Bearer $TOKEN\" \\\\\n--data-urlencode \"output_mode=json\" \\\\\n| jq '.entry[].name'`}\n/>\n\n<Task num=\"5\" language=\"javascript\"\n    code={`// suppress warning messages\nprocess.removeAllListeners('warning');\n// allow self-signed certificates\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = 0;\n\n(async function() {\n\n        // REST API endpoint\n        const url = \"https://localhost:8089/services/data/indexes?output_mode=json\";\n\n        // Headers to send with the request (a JSON object)\n        const headers = new Headers({\n                'Authorization': 'Bearer ' + process.env.TOKEN,\n                'Content-Type': 'application/x-www-form-urlencoded'\n        });\n\n        // invoke the REST API\n        const response = await fetch(url, {'method':'get', 'headers':headers});\n\n        // retrieve and print response data\n        let data = await response.json();\n        //console.log(data);\n        console.log(\"Request: [GET] \" + response.url);\n        console.log(\"Response: [\" + response.status + \"] \" + response.statusText);\n\n        if (response.status === 200) {\n                data.entry.forEach(function(entry) {\n                        console.log(\"  \" + entry.name);\n                }); \n        }\n\n})().catch(err => console.log(err));`}\n/>\n\n\n\n    </div>);\n\n}\n\nexport default Lab2;\n","import React, { useEffect } from \"react\";\n\nimport Avatar from '@mui/material/Avatar';\nimport Divider from '@mui/material/Divider';\nimport Stack from '@mui/material/Stack';\n\n// https://prismjs.com/#languages-list\n\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-python';               // Python\nimport 'prismjs/components/prism-bash';                 // CLI\nimport 'prismjs/components/prism-javascript';           // JavaScript\nimport 'prismjs/components/prism-json';                 // JSON\nimport 'prismjs/components/prism-jsx';                  // React\nimport 'prismjs/components/prism-makefile';             // plain text\nimport 'prismjs/components/prism-properties';           // .conf files\nimport 'prismjs/components/prism-splunk-spl';           // SPL\nimport 'prismjs/components/prism-uri';                  // URLs\nimport '../../prism.css';\n\nfunction Snippet({num, code, language}) {\n\n    useEffect(() => {\n        Prism.highlightAll();\n    },[]);\n\n    return(<div>\n        <Divider/>\n        <Stack direction=\"row\" spacing={5} sx={{margin:3}}>\n            <Avatar variant='rounded' sx={{ bgcolor:'#f56a00', margin: 2, width:'100px' }}>Task {num}</Avatar>\n            <pre style={{width:'90%'}}><code className={`language-${language}`}>{code}</code></pre>\n        </Stack>\n    </div>);\n\n}\n\nexport default Snippet;\n"],"names":["_jsxs","style","margin","children","_jsx","Task","num","language","code","_ref","useEffect","Prism","Divider","Stack","direction","spacing","sx","Avatar","variant","bgcolor","width","className"],"sourceRoot":""}
"use strict";(self.webpackChunkedu_core_dev=self.webpackChunkedu_core_dev||[]).push([[340,346],{4340:(e,n,s)=>{s.r(n),s.d(n,{default:()=>o});var t=s(5346),r=s(579);const o=function(){return(0,r.jsxs)("div",{style:{margin:50},children:[(0,r.jsx)(t.default,{num:"2",language:"bash",code:'#!/bin/bash\n\nURL="https://localhost:8089/services/data/indexes"\n\ncurl -k -X GET $URL \\\n-H "Authorization: Bearer $TOKEN" \\\n| xmlstarlet sel -N a="http://www.w3.org/2005/Atom" -t \\\n-m /a:feed/a:entry -v a:title -n'}),(0,r.jsx)(t.default,{num:"3",language:"python",code:"import os\nimport requests\nimport urllib3\nimport xml.etree.ElementTree as ET\n\n# suppress HTTPS warning messages\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\n# REST API endpoint\nurl = \"https://localhost:8089/services/data/indexes\"\n\n# Headers to send with the request (a JSON object)\nheaders = {\n        'Authorization': 'Bearer ' + os.environ['TOKEN'],\n        'Content-Type': 'application/x-www-form-urlencoded'\n}\n\n# invoke the REST API\nresponse = requests.get(url=url, headers=headers, verify=False)\n\n# retrieve and print response data\n#print(response.content)\nprint(\"Request: [\" + response.request.method + \"] \"  + response.request.url)\nprint(\"Response: [\" + str(response.status_code) + \"] \" + response.reason)\n\n# XML / Atom namespaces\n# '' = atom, s = splunk\nns = {\n        '': 'http://www.w3.org/2005/Atom',\n        's': 'http://dev.splunk.com/ns/rest',\n        'opensearch': 'http://a9.com/-/spec/opensearch/1.1/'\n}\n\nif (response.status_code == 200):\n        # get xml root element\n        root = ET.fromstring(response.text)\n        # for all entries in the atom namespace\n        for entry in root.findall('entry', ns):\n                # print the entry title\n                print(\"  \" + entry.find('title', ns).text)"}),(0,r.jsx)(t.default,{num:"4",language:"bash",code:'#!/bin/bash\n\nURL="https://localhost:8089/services/data/indexes"\n\ncurl -k -X GET $URL \\\n-H "Authorization: Bearer $TOKEN" \\\n--data-urlencode "output_mode=json" \\\n| jq \'.entry[].name\''}),(0,r.jsx)(t.default,{num:"5",language:"javascript",code:"// suppress warning messages\nprocess.removeAllListeners('warning');\n// allow self-signed certificates\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = 0;\n\n(async function() {\n\n        // REST API endpoint\n        const url = \"https://localhost:8089/services/data/indexes?output_mode=json\";\n\n        // Headers to send with the request (a JSON object)\n        const headers = new Headers({\n                'Authorization': 'Bearer ' + process.env.TOKEN,\n                'Content-Type': 'application/x-www-form-urlencoded'\n        });\n\n        // invoke the REST API\n        const response = await fetch(url, {'method':'get', 'headers':headers});\n\n        // retrieve and print response data\n        let data = await response.json();\n        //console.log(data);\n        console.log(\"Request: [GET] \" + response.url);\n        console.log(\"Response: [\" + response.status + \"] \" + response.statusText);\n\n        if (response.status === 200) {\n                data.entry.forEach(function(entry) {\n                        console.log(\"  \" + entry.name);\n                }); \n        }\n\n})().catch(err => console.log(err));"})]})}},5346:(e,n,s)=>{s.r(n),s.d(n,{default:()=>c});var t=s(5043),r=s(1045),o=s(9336),a=s(683),i=s(2999),l=s.n(i),d=(s(3817),s(6149),s(3636),s(337),s(3994),s(3839),s(4194),s(8496),s(7337),s(4608),s(579));const c=function(e){let{num:n,code:s,language:i}=e;return(0,t.useEffect)((()=>{l().highlightAll()}),[]),(0,d.jsxs)("div",{children:[(0,d.jsx)(o.A,{}),(0,d.jsxs)(a.A,{direction:"row",spacing:5,sx:{margin:3},children:[(0,d.jsxs)(r.A,{variant:"rounded",sx:{bgcolor:"#f56a00",margin:2,width:"100px"},children:["Task ",n]}),(0,d.jsx)("pre",{style:{width:"90%"},children:(0,d.jsx)("code",{className:`language-${i}`,children:s})})]})]})}},4608:()=>{}}]);
//# sourceMappingURL=340.a08531db.chunk.js.map